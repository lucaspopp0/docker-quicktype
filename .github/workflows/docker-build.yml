name: docker-build

on:
  workflow_call:
    inputs:
      PUSH:
        required: true
        type: boolean
    secrets:
      BOT_APP_ID:
        required: true
      BOT_PRIVATE_KEY:
        required: true

permissions: write-all

defaults:
  run:
    shell: bash

env:
  GOPRIIVATE: github.com/chinesecheckers/*

jobs:

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Generate bot token
        id: bot-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}
      -
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        id: check-versions
        if: github.event_name == 'pull_request'
        name: Check node versions
        working-directory: docker-quicktype
        run: |
          CURRENT_NODE_VERSION="$(cat .nvmrc)"
          echo "current-node-version=$CURRENT_NODE_VERSION" | tee -a "$GITHUB_OUTPUT"

          # Parse the Dockerfile to get the Node.js version
          DOCKER_NODE_VERSION=v$(cat Dockerfile \
              | grep 'FROM node:' \
              | head -n 1 \
              | sed -E 's/FROM node:([^ ]+).*/\1/')

          echo "docker-node-version=$DOCKER_NODE_VERSION" | tee -a "$GITHUB_OUTPUT"

          if [[ "$CURRENT_NODE_VERSION" == "$DOCKER_NODE_VERSION" ]]; then
              echo "Node version is already up to date."
              echo "needs-update=false" >> $GITHUB_OUTPUT
          else
              echo "Node version needs to be updated."
              echo "needs-update=true" >> $GITHUB_OUTPUT
          fi
      -
        uses: actions/setup-node@v5
        if: steps.check-versions.outputs.needs-update == 'true'
        with:
          node-version: ${{ steps.check-versions.outputs.docker-node-version }}
          cache: npm
          cache-dependency-path: docker-quicktype/package-lock.json
      -
        name: Update project Node version
        if: steps.check-versions.outputs.needs-update == 'true'
        working-directory: docker-quicktype
        env:
          TARGET_VERSION: ${{ steps.check-versions.outputs.docker-node-version }}
        run: |
          echo "${TARGET_VERSION}" > .nvmrc
          npm i
      -
        name: Check for node version changes
        id: node-version-changes
        run: |
          git status -s

          if [ -n "$(git status -s)" ]; then
            echo "detected=true" | tee -a "$GITHUB_OUTPUT"
          else
            echo "detected=false" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        name: Commit node version changes if detected
        if: ${{ steps.node-version-changes.outputs.detected == 'true' }}
        uses: planetscale/ghcommit-action@v0.2.17
        env:
          GITHUB_TOKEN: ${{ steps.bot-token.outputs.token }}
        with:
          commit_message: "ðŸ¤– use node ${{ steps.check-versions.outputs.docker-node-version }}"
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}
      -
        name: Fail if changes
        if: ${{ steps.node-version-changes.outputs.detected == 'true' }}
        run: exit 1
      -
        uses: docker/setup-buildx-action@v3
      -
        if: ${{ inputs.PUSH }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/quicktype
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=pr
      -
        uses: docker/build-push-action@v6
        id: docker-build
        with:
          context: ./docker-quicktype
          push: ${{ inputs.PUSH }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      -
        name: Generate examples
        working-directory: examples
        env:
          IMAGE_ID: ${{ steps.docker-build.outputs.imageid }}
        run: |
          docker run --rm \
            -v "$(pwd):/examples" \
            "$IMAGE_ID" \
              "/examples/inputs/jsonschema/*" \
              -o "/examplesoutputs/swift/Models.swift" \
              --src-lang schema \
              --lang swift \
              --swift-5-support \
              --access-level public \
              --no-coding-keys
      -
        name: Check for examples changes
        id: examples-changes
        run: |
          git status -s

          if [ -n "$(git status -s)" ]; then
            echo "detected=true" | tee -a "$GITHUB_OUTPUT"
          else
            echo "detected=false" | tee -a "$GITHUB_OUTPUT"
          fi
      -
        name: Commit examples changes if detected
        if: ${{ steps.examples-changes.outputs.detected == 'true' }}
        uses: planetscale/ghcommit-action@v0.2.17
        env:
          GITHUB_TOKEN: ${{ steps.bot-token.outputs.token }}
        with:
          commit_message: "ðŸ¤– re-generate example models"
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}
      -
        name: Fail if changes
        if: ${{ steps.examples-changes.outputs.detected == 'true' }}
        run: exit 1
